{"version":3,"file":"jobScheduler.js","sources":["jobs/jobScheduler.ts"],"sourceRoot":"/","sourcesContent":["import chokidar from 'chokidar';\nimport moment from 'moment-timezone';\nimport schedule from 'node-schedule';\nimport logger from '../logger.js';\nimport schedulesDB from '../db/schedules.js';\nimport settingsDB from '../db/settings.js';\nimport { DayOfWeek, Side } from '../db/schedulesSchema.js';\nimport { schedulePowerOffAndSleepAnalysis, schedulePowerOn } from './powerScheduler.js';\nimport { scheduleTemperatures } from './temperatureScheduler.js';\nimport { schedulePrimingRebootAndCalibration } from './primeScheduler.js';\nimport config from '../config.js';\nimport serverStatus from '../serverStatus.js';\nimport { scheduleAlarm } from './alarmScheduler.js';\nimport { isSystemDateValid } from './isSystemDateValid.js';\n\n\nasync function setupJobs() {\n  try {\n    if (serverStatus.status.jobs.status === 'started') {\n      logger.debug('Job setup already running, skipping duplicate execution.');\n      return;\n    }\n    serverStatus.status.jobs.status = 'started';\n\n\n    // Clear existing jobs\n    logger.info('Canceling old jobs...');\n    Object.keys(schedule.scheduledJobs).forEach((jobName) => {\n      schedule.cancelJob(jobName);\n    });\n    await schedule.gracefulShutdown();\n\n    await settingsDB.read();\n    await schedulesDB.read();\n\n    moment.tz.setDefault(settingsDB.data.timeZone || 'UTC');\n\n    const schedulesData = schedulesDB.data;\n    const settingsData = settingsDB.data;\n\n    logger.info('Scheduling jobs...');\n    Object.entries(schedulesData).forEach(([side, sideSchedule]) => {\n      Object.entries(sideSchedule).forEach(([day, schedule]) => {\n        schedulePowerOn(settingsData, side as Side, day as DayOfWeek, schedule.power);\n        schedulePowerOffAndSleepAnalysis(settingsData, side as Side, day as DayOfWeek, schedule.power);\n        scheduleTemperatures(settingsData, side as Side, day as DayOfWeek, schedule.temperatures);\n        scheduleAlarm(settingsData, side as Side, day as DayOfWeek, schedule);\n      });\n    });\n    schedulePrimingRebootAndCalibration(settingsData);\n\n    logger.info('Done scheduling jobs!');\n    serverStatus.status.alarmSchedule.status = 'healthy';\n    serverStatus.status.jobs.status = 'healthy';\n    serverStatus.status.primeSchedule.status = 'healthy';\n    serverStatus.status.powerSchedule.status = 'healthy';\n    serverStatus.status.rebootSchedule.status = 'healthy';\n    serverStatus.status.temperatureSchedule.status = 'healthy';\n  } catch (error: unknown) {\n    serverStatus.status.jobs.status = 'failed';\n    const message = error instanceof Error ? error.message : String(error);\n    logger.error(error);\n    serverStatus.status.jobs.message = message;\n  }\n}\n\nlet RETRY_COUNT = 0;\n\nfunction waitForValidDateAndSetupJobs() {\n  serverStatus.status.systemDate.status = 'started';\n\n  if (isSystemDateValid()) {\n    serverStatus.status.systemDate.status = 'healthy';\n    serverStatus.status.systemDate.message = '';\n    logger.info('System date is valid. Setting up jobs...');\n    void setupJobs();\n  } else if(RETRY_COUNT < 20) {\n    serverStatus.status.systemDate.status = 'retrying';\n    const message = `System date is invalid (year 2010). Retrying in 10 seconds... (Attempt #${RETRY_COUNT}})`;\n    serverStatus.status.systemDate.message = message;\n    RETRY_COUNT++;\n    logger.debug(message);\n    setTimeout(waitForValidDateAndSetupJobs, 5_000);\n  } else {\n    const message = `System date is invalid! No jobs can be scheduled! ${new Date().toISOString()} `;\n    serverStatus.status.systemDate.message = message;\n    logger.warn(message);\n  }\n}\n\n\n// Monitor the JSON file and refresh jobs on change\nchokidar.watch(config.lowDbFolder).on('change', () => {\n  logger.info('Detected DB change, reloading...');\n  if (serverStatus.status.systemDate.status === 'healthy') {\n    void setupJobs();\n  } else {\n    waitForValidDateAndSetupJobs();\n  }\n});\n\n// Initial job setup\nwaitForValidDateAndSetupJobs();\n"],"names":[],"mappings":";;AAAA,OAAO,QAAQ,MAAM,UAAU,CAAC;AAChC,OAAO,MAAM,MAAM,iBAAiB,CAAC;AACrC,OAAO,QAAQ,MAAM,eAAe,CAAC;AACrC,OAAO,MAAM,MAAM,cAAc,CAAC;AAClC,OAAO,WAAW,MAAM,oBAAoB,CAAC;AAC7C,OAAO,UAAU,MAAM,mBAAmB,CAAC;AAE3C,OAAO,EAAE,gCAAgC,EAAE,eAAe,EAAE,MAAM,qBAAqB,CAAC;AACxF,OAAO,EAAE,oBAAoB,EAAE,MAAM,2BAA2B,CAAC;AACjE,OAAO,EAAE,mCAAmC,EAAE,MAAM,qBAAqB,CAAC;AAC1E,OAAO,MAAM,MAAM,cAAc,CAAC;AAClC,OAAO,YAAY,MAAM,oBAAoB,CAAC;AAC9C,OAAO,EAAE,aAAa,EAAE,MAAM,qBAAqB,CAAC;AACpD,OAAO,EAAE,iBAAiB,EAAE,MAAM,wBAAwB,CAAC;AAG3D,KAAK,UAAU,SAAS;IACtB,IAAI,CAAC;QACH,IAAI,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,KAAK,SAAS,EAAE,CAAC;YAClD,MAAM,CAAC,KAAK,CAAC,0DAA0D,CAAC,CAAC;YACzE,OAAO;QACT,CAAC;QACD,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC;QAG5C,sBAAsB;QACtB,MAAM,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;QACrC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YACtD,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;QACH,MAAM,QAAQ,CAAC,gBAAgB,EAAE,CAAC;QAElC,MAAM,UAAU,CAAC,IAAI,EAAE,CAAC;QACxB,MAAM,WAAW,CAAC,IAAI,EAAE,CAAC;QAEzB,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,IAAI,KAAK,CAAC,CAAC;QAExD,MAAM,aAAa,GAAG,WAAW,CAAC,IAAI,CAAC;QACvC,MAAM,YAAY,GAAG,UAAU,CAAC,IAAI,CAAC;QAErC,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;QAClC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,YAAY,CAAC,EAAE,EAAE;YAC7D,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,QAAQ,CAAC,EAAE,EAAE;gBACvD,eAAe,CAAC,YAAY,EAAE,IAAY,EAAE,GAAgB,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;gBAC9E,gCAAgC,CAAC,YAAY,EAAE,IAAY,EAAE,GAAgB,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;gBAC/F,oBAAoB,CAAC,YAAY,EAAE,IAAY,EAAE,GAAgB,EAAE,QAAQ,CAAC,YAAY,CAAC,CAAC;gBAC1F,aAAa,CAAC,YAAY,EAAE,IAAY,EAAE,GAAgB,EAAE,QAAQ,CAAC,CAAC;YACxE,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,mCAAmC,CAAC,YAAY,CAAC,CAAC;QAElD,MAAM,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;QACrC,YAAY,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,GAAG,SAAS,CAAC;QACrD,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC;QAC5C,YAAY,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,GAAG,SAAS,CAAC;QACrD,YAAY,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,GAAG,SAAS,CAAC;QACrD,YAAY,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,GAAG,SAAS,CAAC;QACtD,YAAY,CAAC,MAAM,CAAC,mBAAmB,CAAC,MAAM,GAAG,SAAS,CAAC;IAC7D,CAAC;IAAC,OAAO,KAAc,EAAE,CAAC;QACxB,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC3C,MAAM,OAAO,GAAG,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACvE,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACpB,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IAC7C,CAAC;AACH,CAAC;AAED,IAAI,WAAW,GAAG,CAAC,CAAC;AAEpB,SAAS,4BAA4B;IACnC,YAAY,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,GAAG,SAAS,CAAC;IAElD,IAAI,iBAAiB,EAAE,EAAE,CAAC;QACxB,YAAY,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,GAAG,SAAS,CAAC;QAClD,YAAY,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,GAAG,EAAE,CAAC;QAC5C,MAAM,CAAC,IAAI,CAAC,0CAA0C,CAAC,CAAC;QACxD,KAAK,SAAS,EAAE,CAAC;IACnB,CAAC;SAAM,IAAG,WAAW,GAAG,EAAE,EAAE,CAAC;QAC3B,YAAY,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,GAAG,UAAU,CAAC;QACnD,MAAM,OAAO,GAAG,2EAA2E,WAAW,IAAI,CAAC;QAC3G,YAAY,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,GAAG,OAAO,CAAC;QACjD,WAAW,EAAE,CAAC;QACd,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACtB,UAAU,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;IAClD,CAAC;SAAM,CAAC;QACN,MAAM,OAAO,GAAG,qDAAqD,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,GAAG,CAAC;QACjG,YAAY,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,GAAG,OAAO,CAAC;QACjD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACvB,CAAC;AACH,CAAC;AAGD,mDAAmD;AACnD,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,QAAQ,EAAE,GAAG,EAAE;IACnD,MAAM,CAAC,IAAI,CAAC,kCAAkC,CAAC,CAAC;IAChD,IAAI,YAAY,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,KAAK,SAAS,EAAE,CAAC;QACxD,KAAK,SAAS,EAAE,CAAC;IACnB,CAAC;SAAM,CAAC;QACN,4BAA4B,EAAE,CAAC;IACjC,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,oBAAoB;AACpB,4BAA4B,EAAE,CAAC","debug_id":"029f5abe-e912-5272-b3e2-3c716a9ab134"}