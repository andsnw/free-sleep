{"version":3,"file":"jobs.js","sources":["routes/jobs/jobs.ts"],"sourceRoot":"/","sourcesContent":["import express, { Request, Response } from 'express';\nimport logger from '../../logger.js';\nimport { executeAnalyzeSleep } from '../../jobs/analyzeSleep.js';\nimport { executeCalibrateSensors } from '../../jobs/calibrateSensors.js';\nimport moment from 'moment-timezone';\nimport { Job, JobKeyListSchema } from './jobsSchema.js';\nimport update from '../../jobs/update.js';\nimport reboot from '../../jobs/reboot.js';\n\nconst router = express.Router();\n\n\nconst analyzeSleepLeft = () => executeAnalyzeSleep(\n  'left',\n  moment().subtract(12, 'hours').toISOString(),\n  moment().add(1, 'hours').toISOString()\n);\n\nconst analyzeSleepRight = () => executeAnalyzeSleep(\n  'right',\n  moment().subtract(12, 'hours').toISOString(),\n  moment().add(1, 'hours').toISOString()\n);\n\nconst biometricsCalibrationLeft = () => executeCalibrateSensors(\n  'left',\n  moment().subtract(2, 'hours').toISOString(),\n  moment().add(1, 'hours').toISOString()\n);\n\nconst biometricsCalibrationRight = () => executeCalibrateSensors(\n  'right',\n  moment().subtract(2, 'hours').toISOString(),\n  moment().add(1, 'hours').toISOString()\n);\n\n\nconst JOB_MAP: Record<Job, () => void> = {\n  analyzeSleepLeft,\n  analyzeSleepRight,\n  biometricsCalibrationLeft,\n  biometricsCalibrationRight,\n  reboot,\n  update,\n};\n\n\nrouter.post('/jobs', async (req: Request, res: Response) => {\n  const { body } = req;\n  const validationResult = JobKeyListSchema.safeParse(body);\n\n  if (!validationResult.success) {\n    logger.error('Invalid jobs:', validationResult.error);\n    res.status(400).json({\n      error: 'Invalid request data',\n      details: validationResult?.error?.errors,\n    });\n    return;\n  }\n\n  body.forEach((job: Job) => {\n    JOB_MAP[job]();\n  });\n\n  res.status(204).end();\n});\n\n\nexport default router;\n"],"names":[],"mappings":";;AAAA,OAAO,OAA8B,MAAM,SAAS,CAAC;AACrD,OAAO,MAAM,MAAM,iBAAiB,CAAC;AACrC,OAAO,EAAE,mBAAmB,EAAE,MAAM,4BAA4B,CAAC;AACjE,OAAO,EAAE,uBAAuB,EAAE,MAAM,gCAAgC,CAAC;AACzE,OAAO,MAAM,MAAM,iBAAiB,CAAC;AACrC,OAAO,EAAO,gBAAgB,EAAE,MAAM,iBAAiB,CAAC;AACxD,OAAO,MAAM,MAAM,sBAAsB,CAAC;AAC1C,OAAO,MAAM,MAAM,sBAAsB,CAAC;AAE1C,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;AAGhC,MAAM,gBAAgB,GAAG,GAAG,EAAE,CAAC,mBAAmB,CAChD,MAAM,EACN,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC,WAAW,EAAE,EAC5C,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,WAAW,EAAE,CACvC,CAAC;AAEF,MAAM,iBAAiB,GAAG,GAAG,EAAE,CAAC,mBAAmB,CACjD,OAAO,EACP,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC,WAAW,EAAE,EAC5C,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,WAAW,EAAE,CACvC,CAAC;AAEF,MAAM,yBAAyB,GAAG,GAAG,EAAE,CAAC,uBAAuB,CAC7D,MAAM,EACN,MAAM,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,WAAW,EAAE,EAC3C,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,WAAW,EAAE,CACvC,CAAC;AAEF,MAAM,0BAA0B,GAAG,GAAG,EAAE,CAAC,uBAAuB,CAC9D,OAAO,EACP,MAAM,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,WAAW,EAAE,EAC3C,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,WAAW,EAAE,CACvC,CAAC;AAGF,MAAM,OAAO,GAA4B;IACvC,gBAAgB;IAChB,iBAAiB;IACjB,yBAAyB;IACzB,0BAA0B;IAC1B,MAAM;IACN,MAAM;CACP,CAAC;AAGF,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,EAAE;IACzD,MAAM,EAAE,IAAI,EAAE,GAAG,GAAG,CAAC;IACrB,MAAM,gBAAgB,GAAG,gBAAgB,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IAE1D,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC;QAC9B,MAAM,CAAC,KAAK,CAAC,eAAe,EAAE,gBAAgB,CAAC,KAAK,CAAC,CAAC;QACtD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,KAAK,EAAE,sBAAsB;YAC7B,OAAO,EAAE,gBAAgB,EAAE,KAAK,EAAE,MAAM;SACzC,CAAC,CAAC;QACH,OAAO;IACT,CAAC;IAED,IAAI,CAAC,OAAO,CAAC,CAAC,GAAQ,EAAE,EAAE;QACxB,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC;IACjB,CAAC,CAAC,CAAC;IAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;AACxB,CAAC,CAAC,CAAC;AAGH,eAAe,MAAM,CAAC","debug_id":"3fae7114-428b-5070-90ad-1bb49c08e603"}